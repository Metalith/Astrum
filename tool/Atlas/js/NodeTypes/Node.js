// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["react"], function(React) {
    var Node, OutputNode, TestNode, ValueNode;
    Node = (function(superClass) {
      extend(Node, superClass);

      Node.prototype.el = '';

      function Node(props) {
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.componentWillUpdate = bind(this.componentWillUpdate, this);
        Node.__super__.constructor.call(this, props);
        this.state = {
          dragging: false,
          pos: {
            x: this.props.pos[0],
            y: this.props.pos[1]
          },
          rel: null
        };
      }

      Node.prototype.componentWillUpdate = function(props, state) {
        if (!this.state.dragging && state.dragging) {
          document.addEventListener('mousemove', this.onMouseMove);
          return document.addEventListener('mouseup', this.onMouseUp);
        } else if (this.state.dragging && !state.dragging) {
          document.removeEventListener('mousemove', this.onMouseMove);
          return document.removeEventListener('mouseup', this.onMouseUp);
        }
      };

      Node.prototype.onMouseDown = function(e) {
        if (e.target.tagName !== "INPUT" && e.target.className !== "Field" && e.target.className !== "Handle") {
          return this.setState({
            dragging: true,
            rel: {
              x: e.pageX - this.state.pos.x,
              y: e.pageY - this.state.pos.y
            }
          });
        }
      };

      Node.prototype.onMouseMove = function(e) {
        return this.setState({
          pos: {
            x: e.pageX - this.state.rel.x,
            y: e.pageY - this.state.rel.y
          }
        });
      };

      Node.prototype.onMouseUp = function(e) {
        return this.setState({
          dragging: false
        });
      };

      Node.prototype.preventDrag = function(e) {
        return e.stopPropagation();
      };

      Node.prototype.render = function() {
        var Center, Input, Output, i, k, v;
        i = 0;
        Input = React.createElement("div", {
          "className": "Input"
        }, React.createElement("br", null), (function() {
          var ref, results;
          ref = this.input;
          results = [];
          for (k in ref) {
            v = ref[k];
            results.push(React.createElement("div", {
              "className": "Field",
              "key": i++
            }, k, React.createElement("div", {
              "className": "Handle"
            })));
          }
          return results;
        }).call(this));
        Center = React.createElement("div", {
          "className": "Center"
        }, React.createElement("div", {
          "className": "NodeName"
        }, this.name), React.createElement("div", {
          "className": "Values"
        }, this.center));
        Output = React.createElement("div", {
          "className": "Output"
        }, React.createElement("br", null), (function() {
          var ref, results;
          ref = this.output;
          results = [];
          for (k in ref) {
            v = ref[k];
            results.push(React.createElement("div", {
              "className": "Field",
              "key": i++
            }, k, React.createElement("div", {
              "className": "Handle"
            })));
          }
          return results;
        }).call(this));
        return React.createElement("div", {
          "className": "Node",
          "style": {
            position: "absolute",
            left: this.state.pos.x,
            top: this.state.pos.y
          },
          "onMouseDown": this.onMouseDown
        }, Input, Center, Output);
      };

      return Node;

    })(React.Component);
    TestNode = (function(superClass) {
      extend(TestNode, superClass);

      TestNode.prototype.name = 'Test Node';

      function TestNode(props) {
        TestNode.__super__.constructor.call(this, props);
      }

      TestNode.prototype.input = {
        TestInput: "Test"
      };

      TestNode.prototype.center = "Test Center";

      TestNode.prototype.output = {
        TestOutput: "Test"
      };

      return TestNode;

    })(Node);
    ValueNode = (function(superClass) {
      extend(ValueNode, superClass);

      ValueNode.prototype.name = 'Value';

      function ValueNode(props) {
        ValueNode.__super__.constructor.call(this, props);
      }

      ValueNode.prototype.center = React.createElement("input", {
        "type": "number",
        "name": "fname",
        "onChange": (function() {})
      });

      ValueNode.prototype.output = {
        Val: function() {
          return this.Value;
        }
      };

      return ValueNode;

    })(Node);
    OutputNode = (function(superClass) {
      extend(OutputNode, superClass);

      OutputNode.prototype.name = 'Output';

      function OutputNode(props) {
        OutputNode.__super__.constructor.call(this, props);
      }

      OutputNode.prototype.center = "";

      OutputNode.prototype.input = {
        Program: ""
      };

      return OutputNode;

    })(Node);
    return {
      Node: Node,
      TestNode: TestNode,
      Value: ValueNode,
      Output: OutputNode
    };
  });

}).call(this);

//# sourceMappingURL=Node.map
