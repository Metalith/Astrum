// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["react"], function(React) {
    var TempConnector, connect;
    connect = require('reactredux').connect;
    return TempConnector = (function(superClass) {
      extend(TempConnector, superClass);

      TempConnector.prototype.HandlePos = {
        x: -1,
        y: -1
      };

      function TempConnector(props) {
        this.onMove = bind(this.onMove, this);
        var Field, Handle, HandleRect;
        TempConnector.__super__.constructor.call(this, props);
        Field = document.querySelector('#Node' + this.props.Selected.Node + '>.' + this.props.Selected.Type + '>#' + this.props.Selected.Field);
        Field.classList.add('sel');
        Handle = Field.querySelector('.Handle');
        HandleRect = Handle.getBoundingClientRect();
        this.HandlePos = {
          x: HandleRect.left + HandleRect.width / 2,
          y: HandleRect.top + HandleRect.height / 2
        };
        this.state = {
          MousePos: this.HandlePos
        };
      }

      TempConnector.prototype.componentWillMount = function() {
        return document.addEventListener('mousemove', this.onMove);
      };

      TempConnector.prototype.componentWillUnmount = function() {
        document.querySelector('#Node' + this.props.Selected.Node + '>.' + this.props.Selected.Type + '>#' + this.props.Selected.Field).classList.remove('sel');
        return document.removeEventListener('mousemove', this.onMove);
      };

      TempConnector.prototype.onMove = function(e) {
        return this.setState({
          MousePos: {
            x: e.pageX,
            y: e.pageY
          }
        });
      };

      TempConnector.prototype.render = function() {
        return React.createElement("path", {
          "d": 'M' + this.HandlePos.x + ' ' + this.HandlePos.y + ' L' + this.state.MousePos.x + ' ' + this.state.MousePos.y,
          "stroke": "white",
          "strokeWidth": "3",
          "fill": "none",
          "strokeDasharray": "15,5"
        });
      };

      return TempConnector;

    })(React.Component);
  });

}).call(this);

//# sourceMappingURL=TempConnector.map
