// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(['three', 'react'], function(THREE, React) {
    var Background, connect;
    connect = require('reactredux').connect;
    return Background = (function(superClass) {
      extend(Background, superClass);

      Background.prototype.renderer = new THREE.WebGLRenderer({
        antialias: true
      });

      Background.prototype.scene = new THREE.Scene();

      Background.prototype.camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 0.1, 10);

      Background.prototype.background = '';

      function Background(props) {
        this.onWindowResize = bind(this.onWindowResize, this);
        this.renderScene = bind(this.renderScene, this);
        this.render = bind(this.render, this);
        var geometry, material;
        Background.__super__.constructor.call(this, props);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.domElement.style.position = "absolute";
        this.renderer.domElement.style.top = 0;
        this.renderer.domElement.style.zIndex = 0;
        this.renderer.domElement.className = "background";
        this.renderer.setClearColor(0x0e1112, 1);
        geometry = new THREE.PlaneBufferGeometry(window.innerWidth, window.innerHeight);
        material = new THREE.ShaderMaterial({
          vertexShader: document.getElementById('vertexShader').textContent,
          fragmentShader: document.getElementById('fragmentShader').textContent
        });
        this.background = new THREE.Mesh(geometry, material);
        this.background.rotation.x = -1.57;
        this.scene.add(this.background);
        this.background.position.y = 0;
        this.camera.position.set(0, 5, 0);
        this.camera.lookAt(this.scene.position);
        window.addEventListener('resize', this.onWindowResize, false);
        this.renderScene();
      }

      Background.prototype.componentDidMount = function() {
        return document.getElementById("bg-container").appendChild(this.renderer.domElement);
      };

      Background.prototype.render = function() {
        return React.createElement("div", {
          "id": "bg-container"
        });
      };

      Background.prototype.renderScene = function() {
        requestAnimationFrame(this.renderScene);
        return this.renderer.render(this.scene, this.camera);
      };

      Background.prototype.onWindowResize = function() {
        var h, p, w;
        w = window.innerWidth;
        h = window.innerHeight;
        this.camera.left = w / -2;
        this.camera.right = w / 2;
        this.camera.top = h / 2;
        this.camera.bottom = h / -2;
        this.camera.updateProjectionMatrix();
        p = this.background.geometry.attributes.position.array;
        p[0] = w / -2;
        p[1] = h / 2;
        p[3] = w / 2;
        p[4] = h / 2;
        p[6] = -w / 2;
        p[7] = h / -2;
        p[9] = w / 2;
        p[10] = h / -2;
        this.background.geometry.attributes.position.needsUpdate = true;
        return this.renderer.setSize(window.innerWidth, window.innerHeight);
      };

      return Background;

    })(React.Component);
  });

}).call(this);

//# sourceMappingURL=Background.map
